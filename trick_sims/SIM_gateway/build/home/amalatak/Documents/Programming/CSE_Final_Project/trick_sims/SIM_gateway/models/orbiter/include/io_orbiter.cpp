/**
 * This file was automatically generated by the ICG based on the file:
 * /home/amalatak/Documents/Programming/CSE_Final_Project/trick_sims/SIM_gateway/models/orbiter/include/orbiter.hh
 * This file contains database parameter declarations specific to the
 * data structures and enumerated types declared in the above file.
 * These database parameters are used by the Trick input and
 * data recording processors to gain access to important simulation
 * variable information.
 */

#define TRICK_IN_IOSRC
#include <stdlib.h>
#include "trick/MemoryManager.hh"
#include "trick/attributes.h"
#include "trick/parameter_types.h"
#include "trick/ClassSizeCheck.hh"
#include "trick/UnitsMap.hh"
#include "trick/checkpoint_stl.hh"
#include "/home/amalatak/Documents/Programming/CSE_Final_Project/trick_sims/SIM_gateway/models/orbiter/include/orbiter.hh"

extern "C" {

ATTRIBUTES attrORBITER[] = {
{"vel0", "double", "m", "", "",
  "Init velocity of orbiter",
  10,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  0, NULL, 1, {{3, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"pos0", "double", "m", "", "",
  "Init position of orbiter",
  10,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  24, NULL, 1, {{3, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"acc", "double", "m/s2", "", "",
  "xyz-acceleration",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  48, NULL, 1, {{3, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"vel", "double", "m/s", "", "",
  "xyz-velocity",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  72, NULL, 1, {{3, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"pos", "double", "m", "", "",
  "xyz-position",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  96, NULL, 1, {{3, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"time", "double", "s", "", "",
  "Model time",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  120, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"mu", "double", "m3/s2", "", "",
  "moon standard gravitational parameter",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  128, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"", "", "1", "", "",
  "",
  15,TRICK_VOID, 0, 0, 0, Language_CPP, 0,
  0, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL} };

} //extern "C"


void init_attrORBITER() {

    static int initialized ;
    if (initialized) {
        return;
    }
    initialized = 1;

}

extern "C" {

void init_attrORBITER_c_intf() {
    init_attrORBITER() ;
}

size_t io_src_sizeof_ORBITER() {
    return sizeof(ORBITER) ;
}

void* io_src_allocate_ORBITER(int num) {
    ORBITER* temp = (ORBITER*)calloc(num, sizeof(ORBITER));
    return (void*)temp;
}

void io_src_destruct_ORBITER(void* address __attribute__((unused)), int num __attribute__((unused))) {
}

void io_src_delete_ORBITER(void* address __attribute__((unused))) {}

} //extern "C"

struct UnitsMapORBITER {
    UnitsMapORBITER() {
        Trick::UnitsMap* units_map_ptr = Trick::UnitsMap::units_map();
        units_map_ptr->add_param("ORBITER_vel0", "m") ;
        units_map_ptr->add_param("ORBITER_pos0", "m") ;
        units_map_ptr->add_param("ORBITER_acc", "m/s2") ;
        units_map_ptr->add_param("ORBITER_vel", "m/s") ;
        units_map_ptr->add_param("ORBITER_pos", "m") ;
        units_map_ptr->add_param("ORBITER_time", "s") ;
        units_map_ptr->add_param("ORBITER_mu", "m3/s2") ;
    }
} umORBITER;

